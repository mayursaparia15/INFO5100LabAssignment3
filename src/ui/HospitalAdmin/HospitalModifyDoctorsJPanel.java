/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.HospitalAdmin;

import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.DoctorDirectory;
import model.Doctor;
import model.HospitalDirectory;

/**
 *
 * @author Com
 */
public class HospitalModifyDoctorsJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private DoctorDirectory doctorDirectory;
    private HospitalDirectory hospitalDirectory;
    /**
     * Creates new form ModifyHospitals
     */
    public HospitalModifyDoctorsJPanel(JPanel userProcessContainer,DoctorDirectory doctorDirectory,HospitalDirectory hospitalDirectory) {
        this.userProcessContainer = userProcessContainer;
        this.doctorDirectory = doctorDirectory;
        this.hospitalDirectory = hospitalDirectory;
        initComponents();
        populateTable();
    }
    
    private void populateTable() {
    
        DefaultTableModel  model = (DefaultTableModel) tblDoctors.getModel();
        model.setRowCount(0);
        
        for(Doctor d : doctorDirectory.getDoctorDirectory()){
            
            Object[] row = new Object[3];
            row[0] = d;
            row[1] = d.getDoctorId();
            row[2] = d.getCategory();
            
            model.addRow(row);
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDoctors = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        txtCat = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtHId = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtDId = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtHName = new javax.swing.JTextField();

        lblTitle.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("Modify Doctors ");

        tblDoctors.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Doctor Name", "Doctor ID", "Category"
            }
        ));
        jScrollPane1.setViewportView(tblDoctors);

        btnAdd.setText("Add Doctors");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update Doctors");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnView.setText("View Doctors");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete Doctors");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel5.setText("Doctor Name:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel4.setText("Hospital Name:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel6.setText("Hospital ID:");

        txtHId.setEditable(false);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel2.setText("Doctor ID:");

        txtDId.setEditable(false);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel3.setText("Category:");

        txtHName.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtDId, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtCat, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtHName, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtHId, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAdd)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnUpdate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnView)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDelete)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(lblTitle)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnUpdate)
                    .addComponent(btnView)
                    .addComponent(btnDelete))
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDId, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCat, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtHName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtHId, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(58, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        HospitalAddDoctorsJPanel ahjp = new HospitalAddDoctorsJPanel(userProcessContainer,doctorDirectory,hospitalDirectory);
        userProcessContainer.add("AddDoctorsJPanel",ahjp);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblDoctors.getSelectedRow();

        if(selectedRowIndex<0){
            JOptionPane.showMessageDialog(this, "Please select a row to Update Doctors Details");
            return;
        }
        DefaultTableModel  model = (DefaultTableModel) tblDoctors.getModel();
        Doctor selectedDoctor = (Doctor) model.getValueAt(selectedRowIndex, 0);
        if(tblDoctors.getSelectedRowCount()==1){

            try
            {
                int doctorId = Integer.parseInt(txtDId.getText());
                String name = txtName.getText();
                String category = txtCat.getText();
                String hospitalName = txtHName.getText();
                int hospitalId = Integer.parseInt(txtHId.getText());

                int status = 1;
                //validations
                //            if(name.equals(""))
                //            {
                    //                JOptionPane.showMessageDialog(this, "Name is Mandatory");
                    //                status = 0;
                    //            }
                //            if(employeeID == 0 || String.valueOf(employeeID).equals(""))
                //            {
                    //                JOptionPane.showMessageDialog(this, "Employee ID can't be zero");
                    //                status = 0;
                    //            }
                //            if(age <= 18 || String.valueOf(age).equals(""))
                //            {
                    //                JOptionPane.showMessageDialog(this, "Age should be greater then 18");
                    //                status = 0;
                    //            }
                //            if(!gender.equals("Male") && !gender.equals("Female") && !gender.equals("male") && !gender.equals("female"))
                //            {
                    //                JOptionPane.showMessageDialog(this, "Invalid Gender");
                    //                status = 0;
                    //            }
                //            if(startDate == null)
                //            {
                    //                JOptionPane.showMessageDialog(this, "Start Date is Mandatory");
                    //                status = 0;
                    //            }
                //            if(level.equals(""))
                //            {
                    //                JOptionPane.showMessageDialog(this, "Level is Mandatory");
                    //                status = 0;
                    //            }
                //            if(teamInfo.equals(""))
                //            {
                    //                JOptionPane.showMessageDialog(this, "Team Information is Mandatory");
                    //                status = 0;
                    //            }
                //            if(title.equals(""))
                //            {
                    //                JOptionPane.showMessageDialog(this, "Title is Mandatory");
                    //                status = 0;
                    //            }
                //            String regexNum = "\\d{10}";
                //            Pattern patternNum = Pattern.compile(regexNum);
                //            Matcher matcherNum = patternNum.matcher(String.valueOf(number));
                //            if(!matcherNum.matches())
                //            {
                    //                JOptionPane.showMessageDialog(this, "Invalid number");
                    //                status = 0;
                    //            }
                //            String regex = "^(.+)@(.+)$";
                //            Pattern pattern = Pattern.compile(regex);
                //            Matcher matcher = pattern.matcher(email);
                //            if(email.equals("") || !matcher.matches())
                //            {
                    //                JOptionPane.showMessageDialog(this, "Invalid Email ID");
                    //                status = 0;
                    //            }
                if(status == 1)
                {
                    selectedDoctor.setDoctorName(name);
                    selectedDoctor.setDoctorId(doctorId);
                    selectedDoctor.setHospitalId(hospitalId);
                    selectedDoctor.setCategory(category);
                    selectedDoctor.setHospitalName(hospitalName);

                    //update value
                    model.setValueAt(name, tblDoctors.getSelectedRow(), 0);
                    model.setValueAt(doctorId, tblDoctors.getSelectedRow(), 1);
                    model.setValueAt(category, tblDoctors.getSelectedRow(), 2);

                    JOptionPane.showMessageDialog(this, "Updated Successfully!!");

                    populateTable();

                    txtName.setText("");
                    txtDId.setText("");
                    txtCat.setText("");
                    txtHName.setText("");
                    txtHId.setText("");

                }

            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(this, "Please Click on View before Update!!");
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblDoctors.getSelectedRow();

        if(selectedRowIndex<0){
            JOptionPane.showMessageDialog(this, "Please select a row to View Doctor Details");
            return;
        }
        
        DefaultTableModel  model = (DefaultTableModel) tblDoctors.getModel();
        Doctor selectedDoctor = (Doctor) model.getValueAt(selectedRowIndex, 0);
        
        txtName.setText(selectedDoctor.getDoctorName());
        txtHName.setText(selectedDoctor.getHospitalName());
        txtDId.setText(String.valueOf(selectedDoctor.getDoctorId()));
        txtHId.setText(String.valueOf(selectedDoctor.getHospitalId()));
        txtCat.setText(selectedDoctor.getCategory());
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblDoctors.getSelectedRow();

        if(selectedRowIndex<0){
            JOptionPane.showMessageDialog(this, "Please select a row to Delete Doctor Details");
            return;
        }

        DefaultTableModel  model = (DefaultTableModel) tblDoctors.getModel();
        Doctor selectedDoctor = (Doctor) model.getValueAt(selectedRowIndex, 0);
        doctorDirectory.DeleteDoctor(selectedDoctor);
        JOptionPane.showMessageDialog(this, "Doctor Deleted!!");
        populateTable();

        txtName.setText("");
        txtDId.setText("");
        txtCat.setText("");
        txtHName.setText("");
        txtHId.setText("");
    }//GEN-LAST:event_btnDeleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnView;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblDoctors;
    private javax.swing.JTextField txtCat;
    private javax.swing.JTextField txtDId;
    private javax.swing.JTextField txtHId;
    private javax.swing.JTextField txtHName;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables
}
